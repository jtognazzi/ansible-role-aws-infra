---
# tasks file for ansible-role-aws-infra
- name: upload SSH keys
  local_action:
    module: ec2_key
    region: "{{ aws_region }}"
    name: "{{ lookup('env', 'USER') }}"
    key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    state: present
  run_once: yes

- name: Configure Security Group
  local_action:
    module: ec2_group
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc }}"
    name: default
    description: "TODO Should be set from inventory"
    state: present
    rules: "{{ aws_firewall_rules }}"
  register: ec2_group

- name: create VM instance
  local_action:
    module: ec2
    region: "{{ aws_region }}"
    key_name: "{{ lookup('env', 'USER') }}"
    instance_type: "{{ aws_offering }}"
    instance_tags:
      Name: "{{ inventory_hostname }}"
    image: "{{ aws_template }}"
    group_id: "{{ ec2_group.group_id }}"
    wait: true
    vpc_subnet_id: "{{ aws_subnet }}"
    assign_public_ip: "{{ aws_assign_public_ip }}"
    count_tag: 
      Name: "{{ inventory_hostname }}"
    exact_count: 1
  register: ec2

- name: Make sure the VMs are running
  local_action:
    module: ec2
    instance_ids: '{{ ec2.tagged_instances[0].id }}'
    region: '{{ aws_region }}'
    state: running
    wait: True
    vpc_subnet_id: "{{ aws_subnet }}"
    assign_public_ip:  "{{ aws_assign_public_ip }}"

- name: Set ansible_host to the allocated private IP
  set_fact:
    ansible_host: "{{ ec2.tagged_instances[0].private_ip }}"
  when: not aws_assign_public_ip

- name: Allocate elastic IP
  local_action:
    module: ec2_eip
    region: "{{ aws_region }}"
    public_ip: "{{ aws_public_ip }}"
    device_id: "{{ ec2.tagged_instances[0].id }}"
  when: aws_assign_public_ip

- name: add additional volume to VM
  local_action:
    module: ec2_vol
    region: "{{ aws_region }}"
    name: "{{ item.1.name | default(inventory_dir|basename + '-' + inventory_hostname + '-' + item.0|string) }}"
    device_name: "{{ item.1.device_name }}"
    instance: "{{ ec2.tagged_instances[0].id }}"
    volume_size: "{{ item.1.volume_size }}"
    volume_type: "{{ item.1.volume_type }}"
    delete_on_termination: yes
  with_indexed_items:
  - "{{ aws_disks }}"
  when: aws_disks is not none


- name: waiting for SSH connection
  wait_for_connection:
    delay: 10
    timeout: 300
